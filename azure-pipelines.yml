trigger:
  branches:
    include:
      - main

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '5.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: 'myapp/microservice1'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: 'myapp/microservice2'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)

- stage: Test
  displayName: 'Test Stage'
  jobs:
  - job: UnitTests
    displayName: 'Run Unit Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
  
  - job: IntegrationTests
    displayName: 'Run Integration Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        docker run myapp/microservice1:$(Build.BuildId)
        docker run myapp/microservice2:$(Build.BuildId)
    - script: |
        # Aquí irían los comandos para las pruebas de integración
        echo "Running integration tests"

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Test
  condition: succeeded()

  jobs:
  - deployment: AKSDeployment
    displayName: 'Deploy to AKS'
    environment: 'aks-environment'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
              azureResourceGroup: 'myResourceGroup'
              kubernetesCluster: '$(aksCluster)'
              namespace: 'default'
              command: 'apply'
              useConfigFile: true
              configFile: '**/deployment.yaml'
